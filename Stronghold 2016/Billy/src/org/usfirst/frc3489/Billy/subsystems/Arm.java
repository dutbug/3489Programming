// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3489.Billy.subsystems;

import org.usfirst.frc3489.Billy.PotatoPower;
import org.usfirst.frc3489.Billy.RobotMap;
import org.usfirst.frc3489.Billy.commands.cArm;
import org.usfirst.frc3489.Billy.commands.cDrive;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class Arm extends Subsystem {
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon mArm5 = RobotMap.armmArm5;
    private final AnalogInput sPot1 = RobotMap.armsPot1;
    private final DigitalInput gBall = RobotMap.armgBall;
    private final DigitalInput tDART = RobotMap.armtDART;
    private final DigitalInput bDART = RobotMap.armbDART;
    private final DigitalInput chickenHead01 = RobotMap.armChickenHead01;
    private final DigitalInput chickenHead02 = RobotMap.armChickenHead02;
    private final DigitalInput chickenHead03 = RobotMap.armChickenHead03;
    private final DigitalInput chickenHead04 = RobotMap.armChickenHead04;
    private final DigitalInput chickenHead05 = RobotMap.armChickenHead05;
    private final DigitalInput chickenHead06 = RobotMap.armChickenHead06;
    private final DigitalInput chickenHead07 = RobotMap.armChickenHead07;
    private final DigitalInput chickenHead08 = RobotMap.armChickenHead08;
    private final DigitalInput chickenHead09 = RobotMap.armChickenHead09;
    private final DigitalInput chickenHead10 = RobotMap.armChickenHead10;
    boolean toDART = false;
    boolean boDART = false;
    boolean tryUp = false;
    boolean tryDown = false;
    
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    	setDefaultCommand(new cArm());
    }
    public void stop(){
    	mArm5.set(0);
    }
    
    public boolean SweetSpot(double armPos){
    	boolean AreWeThereYet = true;
    	double sPot1V = 0;
    	//boolean tDart = false;
    	//boolean bDart = false;
    	
    	try{
        	sPot1V = sPot1.getVoltage();
        }catch (Exception e) {
        	//System.out.println("Failed Potatoes");
        	sPot1V = -1;  ///Use > 0 in IF 
        }
    	SmartDashboard.putBoolean("tDART", tDART.get());
    	SmartDashboard.putBoolean("bDART", bDART.get());
    	SmartDashboard.putDouble("Volts", sPot1V);
    	
    	if (sPot1V < armPos && tDART.get()== false){
    		return true;
    	}
    	if (sPot1V > armPos && bDART.get()== false){
    		return true;
    	}
    	
    	if(sPot1V > armPos + PotatoPower.m5stopRange){
    		AreWeThereYet = false;
    	}
    	if(sPot1V < armPos - PotatoPower.m5stopRange){
    		AreWeThereYet = false;
    	}
    	if(AreWeThereYet){
    	System.out.println(AreWeThereYet);
    	}
    	return AreWeThereYet;
    }
    
    public void MoveIt(double armPos){
    	double sPot1V = 0;
    	try{
        	sPot1V = sPot1.getVoltage();
        }catch (Exception e) {
        	//System.out.println("Failed Potatoes");
        	sPot1V = -1;  ///Use > 0 in IF 
        }
    	//if(tryUp == false || tryDown == false ){    		
	    	if (sPot1V < armPos + PotatoPower.m5stopRange){   //move up
	    		if (armPos - sPot1V < .2){
	    			//System.out.println("moving at 15 percent power");
	    			mArm5.set(-0.375);
	    		}else{
	    			//System.out.println("moving at 75 percent power");
	    			//03/31/2016
	    			//MENTOR: John/STUDENT: Phoenix
	    			//changed from 50% to 75%
	        		mArm5.set(-0.75);
	    		}
	    		tryUp = true;
	    		
	    	}
	    	if (sPot1V > armPos + PotatoPower.m5stopRange){  //move down
	    		if (sPot1V - armPos < .2){
	    			//System.out.println("moving at 75 percent power");
	    			mArm5.set(0.375);
	    		}else{
	    			//System.out.println("moving at 15 percent power");
	        		mArm5.set(0.75);
	    		tryDown = true;
	    		//mArm5.set(0.375);
	    	}
	    }
    	//} else{
    	//	mArm5.set(0);
    	//	tryUp = false;
    	//	tryDown = false;		
    	//}
    }
public void GrooveIt(double armPos){

	double sPot1V = 0;
	try{
    	sPot1V = sPot1.getVoltage();
    }catch (Exception e) {
    	//System.out.println("Failed Potatoes");
    	sPot1V = -1;  ///Use > 0 in IF 
    }
	//if(tryUp == false || tryDown == false ){    		
    	if (sPot1V < armPos + PotatoPower.m5stopRange){   //move up
        		mArm5.set(-1);
    		}
    	if (sPot1V > armPos + PotatoPower.m5stopRange){  //move down
        		mArm5.set(1);
    	}
	}
    public void JoystickInput(double Mani) {
    	//System.out.println(Mani);
    	double sPot1V = 0;
    	double armSpeed = Mani;
    	try{
        	sPot1V = sPot1.getVoltage();
        }catch (Exception e) {
        	//System.out.println("Failed Potatoes");
        	sPot1V = -1;  ///Use > 0 in IF 
        }
    	
    	if(bDART.get() == false && armSpeed > .02) { //boDART will stop moving down if Limit Switch is false
    		//	armSpeed = 0;
    			boDART = true;
    			//System.out.println("Bottom of DART");
    		}
    	if(tDART.get() == false && armSpeed < -.02 ) { //toDART will stop moving up if Limit Switch is false
    		//	armSpeed = 0;
    			toDART = true;
    			//System.out.println("Top of DART");
    	}
    	SmartDashboard.putBoolean("toDart",toDART);
    	SmartDashboard.putBoolean("boDart", boDART);
    	SmartDashboard.putDouble("Volts", sPot1V);
    	if(armSpeed > .02) {
    		toDART = false;
    	}
    	if(armSpeed < -.02) {
    		boDART = false;
    	}
    	if(sPot1V < PotatoPower.sHardStop && armSpeed > 0.02){
			armSpeed = 0;
			//System.out.println("Potato Stopped The Arm");
		} 
    	if(boDART == true && armSpeed > 0.02) {
			armSpeed = 0; 
		} 
		if(toDART == true && armSpeed < -0.02){
			armSpeed = 0;
		}
		if(armSpeed < -0.02) { armSpeed = -0.375; } 
		if(armSpeed > 0.02) { armSpeed = 0.375; } 
		mArm5.set(armSpeed);
    }
}

