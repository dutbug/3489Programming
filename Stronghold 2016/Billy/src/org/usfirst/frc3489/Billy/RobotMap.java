// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3489.Billy;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static CANTalon chassismFL1;
    public static CANTalon chassismBR4;
    public static CANTalon chassismBL3;
    public static CANTalon chassismFR2;
    public static RobotDrive chassisRobotDrive41;
    public static AnalogGyro chassisAnalogGyro;
    public static CANTalon shootermShooterL7;
    public static CANTalon shootermShooterR8;
    public static RobotDrive shooterRobotDrive21;
    public static CANTalon scalerDDhanger;
    public static CANTalon armmArm5;
    public static CANTalon armmIntake6;
    public static SpeedController armmKicker9;
    public static AnalogInput armsPot1;
    public static DigitalInput armgBall;
    public static DigitalInput armtDART;
    public static DigitalInput armbDART;
    public static DigitalInput armChickenHead01;
    public static DigitalInput armChickenHead02;
    public static DigitalInput armChickenHead03;
    public static DigitalInput armChickenHead04;
    public static DigitalInput armChickenHead05;
    public static DigitalInput armChickenHead06;
    public static DigitalInput armChickenHead07;
    public static DigitalInput armChickenHead08;
    public static DigitalInput armChickenHead09;
    public static DigitalInput armChickenHead10;
    public static DigitalInput scalerTop;
    public static DigitalInput scalerBottom;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        chassismFL1 = new CANTalon(22);
        LiveWindow.addActuator("Chassis", "mFL1", chassismFL1);
        
        chassismBR4 = new CANTalon(24);
        LiveWindow.addActuator("Chassis", "mBR4", chassismBR4);
        
        chassismBL3 = new CANTalon(21);
        LiveWindow.addActuator("Chassis", "mBL3", chassismBL3);
        
        chassismFR2 = new CANTalon(23);
        LiveWindow.addActuator("Chassis", "mFR2", chassismFR2);
        
        
        chassisRobotDrive41 = new RobotDrive(chassismFL1, chassismBL3,
              chassismFR2, chassismBR4);
        
        chassisRobotDrive41.setSafetyEnabled(false);
        chassisRobotDrive41.setExpiration(0.1);
        chassisRobotDrive41.setSensitivity(0.5);
        chassisRobotDrive41.setMaxOutput(1.0);
        chassisRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
        chassisRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        
        chassisAnalogGyro = new AnalogGyro(0);
        LiveWindow.addSensor("Chassis", "AnalogGyro", chassisAnalogGyro);
        chassisAnalogGyro.setSensitivity(0.007);
        shootermShooterL7 = new CANTalon(25);
        LiveWindow.addActuator("Shooter", "mShooterL7", shootermShooterL7);
        
        shootermShooterR8 = new CANTalon(26);
        LiveWindow.addActuator("Shooter", "mShooterR8", shootermShooterR8);
        
        shooterRobotDrive21 = new RobotDrive(shootermShooterL7, shootermShooterR8);
        
        shooterRobotDrive21.setSafetyEnabled(false);
        shooterRobotDrive21.setExpiration(0.2);
        shooterRobotDrive21.setSensitivity(0.5);
        shooterRobotDrive21.setMaxOutput(1.0);

        scalerDDhanger = new CANTalon(29);
        LiveWindow.addActuator("Scaler", "DDhanger", scalerDDhanger);
        
        armmArm5 = new CANTalon(28);
        LiveWindow.addActuator("Arm", "mArm5", armmArm5);
        
        armmIntake6 = new CANTalon(27);
        LiveWindow.addActuator("Arm", "mIntake6", armmIntake6);
        
        armmKicker9 = new Talon(9);
        LiveWindow.addActuator("Arm", "mKicker9", (Talon) armmKicker9);
        
        armsPot1 = new AnalogInput(1);
        LiveWindow.addSensor("Arm", "sPot1", armsPot1);
        
        armgBall = new DigitalInput(1);
        LiveWindow.addSensor("Arm", "gBall", armgBall);
        
        armtDART = new DigitalInput(8);
        LiveWindow.addSensor("Arm", "tDART", armtDART);
        
        armbDART = new DigitalInput(9);
        LiveWindow.addSensor("Arm", "bDART", armbDART);
        
        armChickenHead01 = new DigitalInput(10);
        LiveWindow.addSensor("Arm", "ChickenHead01", armChickenHead01);
        
        armChickenHead02 = new DigitalInput(11);
        LiveWindow.addSensor("Arm", "ChickenHead02", armChickenHead02);
        
        armChickenHead03 = new DigitalInput(12);
        LiveWindow.addSensor("Arm", "ChickenHead03", armChickenHead03);
        
        armChickenHead04 = new DigitalInput(13);
        LiveWindow.addSensor("Arm", "ChickenHead04", armChickenHead04);
        
        armChickenHead05 = new DigitalInput(14);
        LiveWindow.addSensor("Arm", "ChickenHead05", armChickenHead05);
        
        armChickenHead06 = new DigitalInput(15);
        LiveWindow.addSensor("Arm", "ChickenHead06", armChickenHead06);
        
        armChickenHead07 = new DigitalInput(16);
        LiveWindow.addSensor("Arm", "ChickenHead07", armChickenHead07);
        
        armChickenHead08 = new DigitalInput(17);
        LiveWindow.addSensor("Arm", "ChickenHead08", armChickenHead08);
        
        armChickenHead09 = new DigitalInput(18);
        LiveWindow.addSensor("Arm", "ChickenHead09", armChickenHead09);
        
        armChickenHead10 = new DigitalInput(19);
        LiveWindow.addSensor("Arm", "ChickenHead10", armChickenHead10);
        
        scalerTop = new DigitalInput(3);
        LiveWindow.addSensor("Scaler", "scalerUp", scalerTop);
        
        scalerBottom = new DigitalInput(4);
        LiveWindow.addSensor("Scaler", "scalerDown", scalerBottom);
        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
