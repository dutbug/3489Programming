// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3489.Billy;

import org.usfirst.frc3489.Billy.commands.Auto1;
import org.usfirst.frc3489.Billy.commands.Auto2;
import org.usfirst.frc3489.Billy.commands.Auto3;
import org.usfirst.frc3489.Billy.commands.AutonomousCommand;
import org.usfirst.frc3489.Billy.subsystems.Arm;
import org.usfirst.frc3489.Billy.subsystems.Chassis;
import org.usfirst.frc3489.Billy.subsystems.Scaler;
import org.usfirst.frc3489.Billy.subsystems.Shooter;

import com.ni.vision.NIVision;
import com.ni.vision.NIVision.DrawMode;
import com.ni.vision.NIVision.Image;
import com.ni.vision.NIVision.ShapeMode;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;
    Command auto1;
    Command auto2;
    Command auto3;
    PowerDistributionPanel PDP = new PowerDistributionPanel(0);
    
    
    
    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Chassis chassis;
    public static Shooter shooter;
    public static Scaler scaler;
    public static Arm arm;
    int mRob;
	int session;
	int aMode = 1;
	double sTime;
    Image frame;
    //TODO:this is where you move the circle around
    NIVision.Rect rect = new NIVision.Rect(350, 240, 150, 150);  //WiT
    									//(y-axis, x-axis, height, width)

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        chassis = new Chassis();
        shooter = new Shooter();
        scaler = new Scaler();
        arm = new Arm();
        mRob = 0;
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();
        //RobotMap.chassismFL1.setInverted(true);
        //RobotMap.chassismFR2.setInverted(true);

        SmartDashboard.putString("camera", " ");
        try{// this is "cam0"
        	frame = NIVision.imaqCreateImage(NIVision.ImageType.IMAGE_RGB, 0);
        // the camera name (ex "cam0
        //	") can be found through the roborio web interface
        	session = NIVision.IMAQdxOpenCamera("cam1",  //TODO: Change CAM# to match RoboRio
                NIVision.IMAQdxCameraControlMode.CameraControlModeController);
        	NIVision.IMAQdxConfigureGrab(session);
        	SmartDashboard.putString("camera", " Cam1");
        }catch (Exception e) {
        	/*try{// this is "cam 1"
	        	frame = NIVision.imaqCreateImage(NIVision.ImageType.IMAGE_RGB, 0);
	            // the camera name (ex "cam0
	            //	") can be found through the roborio web interface
	            	session = NIVision.IMAQdxOpenCamera("cam0",  //TODO: Change CAM# to match RoboRio
	                    NIVision.IMAQdxCameraControlMode.CameraControlModeController);
	            	NIVision.IMAQdxConfigureGrab(session);
	            	SmartDashboard.putString("camera", " Cam0");
        	//System.out.println("Failed Vision");
        	}catch (Exception f){
        		try{// this is "cam2"
    	        	frame = NIVision.imaqCreateImage(NIVision.ImageType.IMAGE_RGB, 0);
    	            // the camera name (ex "cam0
    	            //	") can be found through the roborio web interface
    	            	session = NIVision.IMAQdxOpenCamera("cam2",  //TODO: Change CAM# to match RoboRio
    	                    NIVision.IMAQdxCameraControlMode.CameraControlModeController);
    	            	NIVision.IMAQdxConfigureGrab(session);
    	            	SmartDashboard.putString("camera", " Cam2");
            	//System.out.println("Failed Vision");
            	}catch (Exception g){
            		SmartDashboard.putString("camera", " Cam Cam Cam is DEAD!!!X(");
            	}
        	} */
        }
    	try {
    		NIVision.IMAQdxStartAcquisition(session);
    	} catch (Exception e) {
    		//System.out.println("Vision Error");
    	}
        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        autonomousCommand = new AutonomousCommand();
        auto1 = new Auto1();
        auto2 = new Auto2();
        auto3 = new Auto3();

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        SmartDashboard.putDouble("Volts", 0);
        SmartDashboard.putBoolean("scalingUp", false);
        SmartDashboard.putBoolean("scalingDown", false);
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){
    	Robot.arm.stop();
    	Robot.shooter.stop();
    	Robot.chassis.stop();
    	Robot.scaler.stop();
    	//autonomousCommand = null;
    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
        
    }

    public void autonomousInit() {
    	sTime = Timer.getFPGATimestamp();
    	//PotatoPower.inAuto = true;
        //RobotMap.chassisRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
        //RobotMap.chassisRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        // schedule the autonomous command (example)
    	if (RobotMap.armChickenHead01.get()== false){
    		System.out.println("Billy Ate Chicken1");
    		autonomousCommand = auto1;
    		aMode = 1;
    		//Auto1.start();
    		}
    	if (RobotMap.armChickenHead09.get()== false){
    		System.out.println("Billy Ate Chicken9");
        	autonomousCommand = auto2;
    		aMode = 2;
    		//Auto2.start();
    		}
    	if (RobotMap.armChickenHead10.get()== false){
        	autonomousCommand = auto3;
    		
        	System.out.println("Billy Ate Chicken10");
        	aMode = 3;
        	//Auto3.start();
    		}
        if (autonomousCommand != null) autonomousCommand.start();
    		}

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    	/*
    	if (aMode == 1){
    		Robot.chassis.stop();
    	}
    	if (aMode == 2){
    		if(Timer.getFPGATimestamp()- sTime > 2.2){
    			Robot.chassis.stop();
    		}else{
    			Robot.arm.MoveIt(PotatoPower.pos5);
            	Robot.chassis.ADrive(1);
    		}
    	}
    	  */
    	
    	//if (aMode == 3){
    		//Robot.chassis.stop();
    	//}
    	
    	//SmartDashboard.putBoolean("Chicken9", RobotMap.armChickenHead09.get());
    	//SmartDashboard.putBoolean("Chicken10", RobotMap.armChickenHead10.get());
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        SmartDashboard.putBoolean("Got Ball", false);
        PotatoPower.goBall = false;
        //PotatoPower.inAuto = false;
       //System.out.println("PotatoPower.goBall = false");
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        //SmartDashboard.putDouble("Front Left Motor", RobotMap.chassismFL1.getOutputCurrent());
        //SmartDashboard.putDouble("Front Right Motor", RobotMap.chassismFR2.getOutputCurrent());
        //SmartDashboard.putDouble("Back Left Motor", RobotMap.chassismBL3.getOutputCurrent());
        //SmartDashboard.putDouble("Back Right Motor", RobotMap.chassismBR4.getOutputCurrent());
        //mRob++;//goes up by one
    	//System.out.println(mRob+","+Timer.getFPGATimestamp());
        
        try{
		    NIVision.IMAQdxGrab(session, frame, 1);
		    NIVision.imaqDrawShapeOnImage(frame, frame, rect,
		            DrawMode.PAINT_INVERT, ShapeMode.SHAPE_OVAL, 0.0f);
		    CameraServer.getInstance().setImage(frame);
        }catch (Exception e) {
        	//System.out.println("Failed Vision");
        }
    }

    public void testInit() {
    	PDP.clearStickyFaults();
    }
    
    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
    	
    	System.out.println("Who Let The Chickens Out?");
    /*  SmartDashboard.putBoolean("Chicken1", RobotMap.armChickenHead01.get());
    	SmartDashboard.putBoolean("Chicken2", RobotMap.armChickenHead02.get());
    	SmartDashboard.putBoolean("Chicken3", RobotMap.armChickenHead03.get());
    	SmartDashboard.putBoolean("Chicken4", RobotMap.armChickenHead04.get());
    	SmartDashboard.putBoolean("Chicken5", RobotMap.armChickenHead05.get());
    	SmartDashboard.putBoolean("Chicken6", RobotMap.armChickenHead06.get());
    	SmartDashboard.putBoolean("Chicken7", RobotMap.armChickenHead07.get());
    	SmartDashboard.putBoolean("Chicken8", RobotMap.armChickenHead08.get()); */
    	SmartDashboard.putBoolean("Chicken9", RobotMap.armChickenHead09.get());
    	SmartDashboard.putBoolean("Chicken10", RobotMap.armChickenHead10.get());
        //LiveWindow.run();
    }
}
