package org.usfirst.frc.team3489.robot;

/*
Alex 01/20/2018 - Palm Base Code

Left Stick Buttons
 * 1 - Camera POV Up
 * 7 - Shift Gears 50%
 * Y - Left Drive

Right Stick Buttons
 * 1 - Camera POV Down
 * 7 - Shift Gears 100%
 * Y - Right Drive

Manipulator Stick Buttons
 * 1 - **Retractor Up?**	
 * 2 - **Retractor Down?**
 * 3 - Open Gripper	
 * 4 - Close Gripper			
 * 5 - Kill Lift
 * 6 - Kill Intake
 * 7 - Floor Position
 * 8 - Switch Position 
 * 9 - Low Scale Position
 * 10 - High Scale Position	
 * 11 - Climber Up
 * 12 - Climber Down
 * +X - Only Left Outtake
 * -X - Only Right Outake 
 * +Y - Cube Outtake	
 * -Y - Cube Intake
 * +Z - Invert Left Intake
 * -Z - Invert Right Intake
 * POV Up (0) - Lifter Up
 * POV Down (180) - Lifter Down
*/

import com.kauailabs.navx.frc.AHRS;
import com.ctre.phoenix.motorcontrol.can.*;
import com.ctre.phoenix.motion.SetValueMotionProfile;
import com.ctre.phoenix.motorcontrol.ControlMode;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.internal.HardwareHLUsageReporting;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotController;
import edu.wpi.first.wpilibj.SPI;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import java.util.function.BinaryOperator;

import edu.wpi.first.wpilibj.Timer;

public class Robot extends IterativeRobot {
	
	Joystick leftStick = new Joystick(0); // Left Driver Joystick
	Joystick rightStick = new Joystick(1); // Right Driver Joystick
	Joystick maniStick = new Joystick(2); // Manipulator Joystick
	WPI_TalonSRX m1 = new WPI_TalonSRX(1); // Front Left Motor
	WPI_TalonSRX m2 = new WPI_TalonSRX(2); // Front Right Motor
	WPI_TalonSRX m3 = new WPI_TalonSRX(3); // Back Left Motor (Slave)
	WPI_TalonSRX m4 = new WPI_TalonSRX(4); // Back Right Motor (Slave)
	WPI_TalonSRX m5 = new WPI_TalonSRX(5); // Left Intake Motor
	WPI_TalonSRX m6 = new WPI_TalonSRX(6); // Right Intake Motor
	WPI_TalonSRX m7 = new WPI_TalonSRX(7); // Climb Motor
	WPI_TalonSRX m8 = new WPI_TalonSRX(8); // Lift Motor	//**//
	DifferentialDrive driveTrain = new DifferentialDrive(m1, m2); // Main Drive Train
	Solenoid s1 = new Solenoid(20, 1); // Lift  //**//
	Solenoid s2 = new Solenoid(20, 2); // Grip
	Solenoid s3 = new Solenoid(20, 3); // Gear Shift
	Solenoid s4 = new Solenoid(20, 4); // CameraPOV
	// Auto Testing // DigitalInput gripperDown = new DigitalInput(1); // Hall Sensor
	DigitalInput autoCube = new DigitalInput(3); // Auto Grip and Retract With Cube
	// DigitalInput autoCubeL = new DigitalInput(2);
	// DigitalInput autoCubeR = new DigitalInput(2);
	DigitalInput topRung = new DigitalInput(10); // Fully Climbed Rung
	Encoder leftEnc = new Encoder(4, 5, false, Encoder.EncodingType.k2X); // Left Drive Encoder
	Encoder rightEnc = new Encoder(6, 7, false, Encoder.EncodingType.k2X); // Right Drive Encoder
	Encoder liftEnc = new Encoder(8, 9, false, Encoder.EncodingType.k2X); // Lift Encoder
	private AHRS navx = new AHRS(SPI.Port.kMXP); // NavX Component
	DriverStation.Alliance color; // Alliance Color
	int step = 1; // Initial Step Value
	
	// Booleans
		boolean inTake; // Run Intake
		boolean outTake; // Run Outtake
		boolean killLift; // Kills Lifter Commands
		boolean killIntake; // Kills Intake Commands
		boolean killClimb; // Kills Climber Commands
		boolean floorMov; // Move Lifter To Floor
		boolean switchMov; // Move Lifter To Switch
		boolean scaleLMov; // Move Lifter To Low Scale
		boolean scaleHMov; // Move Lifter To High Scale
		boolean gripCube; // Grips Cube and Stops Intake
		// Testing
		boolean user; // User Button in Disabled
		boolean good90; // Turn 90 Degrees
		boolean bad90; // Turn -90 Degrees
		
	// Lift Positions
		double floorPos = 0; // Floor Position
		double switchPos = 0; // Switch Position
		double scaleLPos = 0; // Low Scale Position
		double scaleHPos = 0; // High Scale Position
	
	// Autonomous
		// Selection
			DigitalInput ch1 = new DigitalInput(0); // Left Switch Score/Autoline
			DigitalInput ch2 = new DigitalInput(1); // Middle Switch Score/Autoline
			DigitalInput ch3 = new DigitalInput(2); // Right Switch Score/Autoline
			DigitalInput ch4 = new DigitalInput(11); // Null
				
		// Distances
			 // Left Side Switch Scoring
				double leftDis1 = 300;
				double leftDis2 = 100;
				double leftDis3 = -100;
				double leftDis4 = 200;
				double leftDis5 = 200;
			 // Left Side Switch Driving
				double leftDis6 = 500;
				double leftDis7 = 200;
			 // Middle Left Switch Scoring
				double midlDis1 = 300;
				double midlDis2 = 300;
				double midlDis3 = 200;
				double midlDis4 = 100;
				double midlDis5 = -100;
				double midlDis6 = 200;
			 // Middle Right Switch Scoring
				double midrDis1 = 300;
				double midrDis2 = 300;
				double midrDis3 = 200;
				double midrDis4 = 100;
				double midrDis5 = -100;
				double midrDis6 = 200;
			 // Right Side Switch Scoring
				double rightDis1 = 300;
				double rightDis2 = 100;
				double rightDis3 = -100;
				double rightDis4 = 100;
				double rightDis5 = 100;
			 // Right Side Switch Driving
				double rightDis6 = 500;
				double rightDis7 = 100;
				
		// Angles
			 // Left Side Switch Scoring
				double leftAng1 = 90;
				double leftAng2 = -90;
				double leftAng3 = 90;
			 // Left Side Switch Driving
				double leftAng4 = 90;
			 // Middle Left Switch Scoring
				double midlAng1 = -90;
				double midlAng2 = 90;
				double midlAng3 = 90;
				double midlAng4 = -90;
			 // Middle Right Switch Scoring
				double midrAng1 = 90;
				double midrAng2 = -90;
				double midrAng3 = -90;
				double midrAng4 = 90;
		     // Right Side Switch Scoring
				double rightAng1 = -90;
				double rightAng2 = 90;
				double rightAng3 = -90;
			 // Right Side Switch Driving
				double rightAng4 = -90;
			 // Angle Offset
				double angleOff = .5;

	@Override
    public void robotInit() {
		
		// Safety
			driveTrain.setSafetyEnabled(false);
		
		// Camera
			try {
				CameraServer.getInstance().startAutomaticCapture();
				// system.out.println("Cam0");
			} catch (Exception e) {
				// system.out.println("Failed Vision");
			}
				
		// NavX
			navx.reset();
			
		// Encoders
			leftEnc.reset();
			rightEnc.reset();
			liftEnc.reset();
		
		// Slaves
			m3.follow(m1); // Back Left Motor (Slave) Follows Front Left Motor
			m4.follow(m2); // Back Right Motor (Slave) Follows Front Right Motor
    	
		// SmartDashboard
    	
    }
    
	@Override
    public void autonomousInit() {

		// Resets
			leftEnc.reset();
			rightEnc.reset();
			navx.reset();
			step = 1;
    }
    
	@Override
    public void autonomousPeriodic() {
		
			double encLD = leftEnc.getDistance() * -1; // Left Encoder Value
			double encRD = rightEnc.getDistance() * 1; // Right Encoder Value
			double navxY = navx.getYaw(); // NavX Yaw Value
			double heading = navx.getFusedHeading(); // NavX Heading Value
			
			System.out.println(encRD);
			
			String gameData;
    	    gameData = DriverStation.getInstance().getGameSpecificMessage();
  
	if (ch1.get() == false) { // Left Switch Autonomous Selection
		switch (step) {
		case 1: // Decision Method
			if (gameData.charAt(0) == 'L') {	// Run Scoring Method
				//s1.set(true);
				//s2.set(true);
				step++;
			} else if (gameData.charAt(0) == 'R'){ // Run Driving Method
				//s1.set(true);
				//s2.set(true);
				step = 11;
			}
			rightEnc.reset();
			navx.reset();
			break;
		case 2:	// Forward ~ 165 in
			if (navxY <= angleOff && navxY >= -angleOff && encRD <= leftDis1) {
				driveTrain.tankDrive(.8, .8);
			} else if (navxY >= angleOff && encRD <= leftDis1) {
				driveTrain.tankDrive(.8, .85);
			} else if (navxY <= -angleOff && encRD <= leftDis1) {
				driveTrain.tankDrive(.85, .8);
			} else if (encRD >= leftDis1) {
				navx.reset();
				step++;
			}
			break;
		case 3:	// Rotate 90
		    if (heading < 45 || heading > 359) {
		    	driveTrain.tankDrive(.8, -.8);
		    } else if (heading > 45 && heading < 86) {
		    	driveTrain.tankDrive(.58, -.58);
		    } else if (heading > 86) {
		    	driveTrain.tankDrive(0, 0);
		    	navx.reset();
		    	rightEnc.reset();
		    	step++;
		    } 
			break;
		case 4:	// Forward ~ 10 in
			if (navxY <= angleOff && navxY >= -angleOff && encRD <= leftDis2) {
				driveTrain.tankDrive(.8, .8);
			} else if (navxY >= angleOff && encRD <= leftDis2) {
				driveTrain.tankDrive(.8, .85);
			} else if (navxY <= -angleOff && encRD <= leftDis2) {
				driveTrain.tankDrive(.85, .8);
			} else if (encRD >= leftDis2) {
				navx.reset();
				step++;
			}
			break;
		case 5:	// Place Cube
			driveTrain.tankDrive(0, 0);
			rightEnc.reset();
			s1.set(false);
			Timer.delay(.5);
			step++;
			break;
		case 6:	// Reverse ~ 10 in
			if (navxY <= angleOff && navxY >= -angleOff && encRD >= leftDis3) {
				driveTrain.tankDrive(-.8, -.8);
			} else if (navxY >= angleOff && encRD >= leftDis3) {
				driveTrain.tankDrive(-.8, -.85);
			} else if (navxY <= -angleOff && encRD >= leftDis3) {
				driveTrain.tankDrive(-.85, -.8);
			} else if (encRD <= leftDis3) {
				navx.reset();
				step++;
			}
			break;
		case 7:	// Rotate -90
		    if (heading > 315 || heading < 1) {
		    	driveTrain.tankDrive( -.8, .8);
		    } else if (heading < 315 && heading > 274) {
		    	driveTrain.tankDrive( -.58, .58);
		    } else if (heading < 274) {
		    	driveTrain.tankDrive(0, 0);
		    	navx.reset();
		    	rightEnc.reset();
		    	step++;
		    }    
			break;
		case 8:	// Forward ~ 100 in
			if (navxY <= angleOff && navxY >= -angleOff && encRD <= leftDis4) {
				driveTrain.tankDrive(.8, .8);
			} else if (navxY >= angleOff && encRD <= leftDis4) {
				driveTrain.tankDrive(.8, .85);
			} else if (navxY <= -angleOff && encRD <= leftDis4) {
				driveTrain.tankDrive(.85, .8);
			} else if (encRD >= leftDis4) {
				navx.reset();
				step++;
			}
			break;
		case 9:	// Rotate 90
	    	if (heading < 45 || heading > 359) {
	    		driveTrain.tankDrive(.8, -.8);
	    	} else if (heading > 45 && heading < 86) {
	    		driveTrain.tankDrive( .58, -.58);
	    	} else if (heading > 86) {
	    		driveTrain.tankDrive(0, 0);
	    		navx.reset();
	    		rightEnc.reset();
	    		step++;
	    	} 
			break;
		case 10: // Forward ~ 100 in
			if (navxY <= angleOff && navxY >= -angleOff && encRD <= leftDis5) {
				driveTrain.tankDrive(.8, .8);
			} else if (navxY >= angleOff && encRD <= leftDis5) {
				driveTrain.tankDrive(.8, .85);
			} else if (navxY <= -angleOff && encRD <= leftDis5) {
				driveTrain.tankDrive(.85, .8);
			} else if (encRD >= leftDis5) {
				navx.reset();
				step++;
			}
			break;
		case 11: // Forward ~ 250 in
			if (navxY <= angleOff && navxY >= -angleOff && encRD <= leftDis6) {
				driveTrain.tankDrive(.8, .8);
			} else if (navxY >= angleOff && encRD <= leftDis6) {
				driveTrain.tankDrive(.8, .85);
			} else if (navxY <= -angleOff && encRD <= leftDis6) {
				driveTrain.tankDrive(.85, .8);
			} else if (encRD >= leftDis6) {
				navx.reset();
				step++;
			}
			break;
		case 12: // Rotate 90
			if (heading < 45 || heading > 359) {
	    		driveTrain.tankDrive(.8, -.8);
	    	} else if (heading > 45 && heading < 86) {
	    		driveTrain.tankDrive( .58, -.58);
	    	} else if (heading > 86) {
	    		driveTrain.tankDrive(0, 0);
	    		navx.reset();
	    		rightEnc.reset();
	    		step++;
	    	} 
			break;
		case 13: // Forward ~ 100 in
			if (navxY <= angleOff && navxY >= -angleOff && encRD <= leftDis7) {
				driveTrain.tankDrive(.8, .8);
			} else if (navxY >= angleOff && encRD <= leftDis7) {
				driveTrain.tankDrive(.8, .85);
			} else if (navxY <= -angleOff && encRD <= leftDis7) {
				driveTrain.tankDrive(.85, .8);
			} else if (encRD >= leftDis7) {
				navx.reset();
				step++;
			}
			break;
		case 14: // Stop
			driveTrain.tankDrive(0, 0);
			break;
		}
	} else if (ch2.get() == false) { // Middle Switch Autonomous Selection
		switch (step) {
		case 1: // Decision Method
			if (gameData.charAt(0) == 'L') {	// Run Left Scoring Method
				//s1.set(true);
				//s2.set(true);
				step++;
			} else if (gameData.charAt(0) == 'R'){ // Run Right Scoring Method 
				//s1.set(true);
				//s2.set(true);
				step = 13;
			}
			rightEnc.reset();
			navx.reset();
			break;
		case 2:	// Forward ~ 90 in
			if (navxY <= angleOff && navxY >= -angleOff && encRD <= midlDis1) {
				driveTrain.tankDrive(.8, .8);
			} else if (navxY >= angleOff && encRD <= midlDis1) {
				driveTrain.tankDrive(.8, .85);
			} else if (navxY <= -angleOff && encRD <= midlDis1) {
				driveTrain.tankDrive(.85, .8);
			} else if (encRD >= midlDis1) {
				navx.reset();
				step++;
			}
			break;
		case 3:	// Rotate -90
		    if (heading > 315 || heading < 1) {
		    	driveTrain.tankDrive( -.8, .8);
		    } else if (heading < 315 && heading > 274) {
		    	driveTrain.tankDrive( -.58, .58);
		    } else if (heading < 274) {
		    	driveTrain.tankDrive(0, 0);
		    	navx.reset();
		    	rightEnc.reset();
		    	step++;
		    } 
		    break;
		case 4:	// Forward ~ 130 in
			if (navxY <= angleOff && navxY >= -angleOff && encRD <= midlDis2) {
				driveTrain.tankDrive(.8, .8);
			} else if (navxY >= angleOff && encRD <= midlDis2) {
				driveTrain.tankDrive(.8, .85);
			} else if (navxY <= -angleOff && encRD <= midlDis2) {
				driveTrain.tankDrive(.85, .8);
			} else if (encRD >= midlDis2) {
				navx.reset();
				step++;
			}
			break;
		case 5:	// Rotate 90
			if (heading < 45 || heading > 359) {
	    		driveTrain.tankDrive(.8, -.8);
	    	} else if (heading > 45 && heading < 86) {
	    		driveTrain.tankDrive( .58, -.58);
	    	} else if (heading > 86) {
	    		driveTrain.tankDrive(0, 0);
	    		navx.reset();
	    		rightEnc.reset();
	    		step++;
	    	} 
			break;
		case 6:	// Forward ~ 75 in
			if (navxY <= angleOff && navxY >= -angleOff && encRD <= midlDis3) {
				driveTrain.tankDrive(.8, .8);
			} else if (navxY >= angleOff && encRD <= midlDis3) {
				driveTrain.tankDrive(.8, .85);
			} else if (navxY <= -angleOff && encRD <= midlDis3) {
				driveTrain.tankDrive(.85, .8);
			} else if (encRD >= midlDis3) {
				navx.reset();
				step++;
			}
			break;
		case 7:	// Rotate 90
			if (heading < 45 || heading > 359) {
	    		driveTrain.tankDrive(.8, -.8);
	    	} else if (heading > 45 && heading < 86) {
	    		driveTrain.tankDrive( .58, -.58);
	    	} else if (heading > 86) {
	    		driveTrain.tankDrive(0, 0);
	    		navx.reset();
	    		rightEnc.reset();
	    		step++;
	    	} 
			break;
		case 8:	// Forward ~ 10 in
			if (navxY <= angleOff && navxY >= -angleOff && encRD <= midlDis4) {
				driveTrain.tankDrive(.8, .8);
			} else if (navxY >= angleOff && encRD <= midlDis4) {
				driveTrain.tankDrive(.8, .85);
			} else if (navxY <= -angleOff && encRD <= midlDis4) {
				driveTrain.tankDrive(.85, .8);
			} else if (encRD >= midlDis4) {
				navx.reset();
				step++;
			}
			break;
		case 9:	// Place Cube
			driveTrain.tankDrive(0, 0);
			rightEnc.reset();
			s1.set(false);
			step++;
			break;
		case 10: // Reverse ~ 10 in
			if (navxY <= angleOff && navxY >= -angleOff && encRD >= midlDis5) {
				driveTrain.tankDrive(-.8, -.8);
			} else if (navxY >= angleOff && encRD >= midlDis5) {
				driveTrain.tankDrive(-.8, -.85);
			} else if (navxY <= -angleOff && encRD >= midlDis5) {
				driveTrain.tankDrive(-.85, -.8);
			} else if (encRD <= midlDis5) {
				navx.reset();
				step++;
			}
			break;
		case 11: // Rotate -90
		    if (heading > 315 || heading < 1) {
		    	driveTrain.tankDrive( -.8, .8);
		    } else if (heading < 315 && heading > 274) {
		    	driveTrain.tankDrive( -.58, .58);
		    } else if (heading < 274) {
		    	driveTrain.tankDrive(0, 0);
		    	navx.reset();
		    	rightEnc.reset();
		    	step++;
		    } 
			break;
		case 12: // Forward ~ 100 in
			if (navxY <= angleOff && navxY >= -angleOff && encRD <= midlDis6) {
				driveTrain.tankDrive(.8, .8);
			} else if (navxY >= angleOff && encRD <= midlDis6) {
				driveTrain.tankDrive(.8, .85);
			} else if (navxY <= -angleOff && encRD <= midlDis6) {
				driveTrain.tankDrive(.85, .8);
			} else if (encRD >= midlDis6) {
				navx.reset();
				step++;
			}
			break;
		case 13: // Forward ~ 90 in
			if (navxY <= angleOff && navxY >= -angleOff && encRD <= midrDis1) {
				driveTrain.tankDrive(.8, .8);
			} else if (navxY >= angleOff && encRD <= midrDis1) {
				driveTrain.tankDrive(.8, .85);
			} else if (navxY <= -angleOff && encRD <= midrDis1) {
				driveTrain.tankDrive(.85, .8);
			} else if (encRD >= midrDis1) {
				navx.reset();
				step++;
			}
			break;
		case 14: // Rotate 90
			if (heading < 45 || heading > 359) {
	    		driveTrain.tankDrive(.8, -.8);
	    	} else if (heading > 45 && heading < 86) {
	    		driveTrain.tankDrive( .58, -.58);
	    	} else if (heading > 86) {
	    		driveTrain.tankDrive(0, 0);
	    		navx.reset();
	    		rightEnc.reset();
	    		step++;
	    	} 
			break;
		case 15: // Forward ~ 130 in
			if (navxY <= angleOff && navxY >= -angleOff && encRD <= midrDis2) {
				driveTrain.tankDrive(.8, .8);
			} else if (navxY >= angleOff && encRD <= midrDis2) {
				driveTrain.tankDrive(.8, .85);
			} else if (navxY <= -angleOff && encRD <= midrDis2) {
				driveTrain.tankDrive(.85, .8);
			} else if (encRD >= midrDis2) {
				navx.reset();
				step++;
			}
			break;
		case 16: // Rotate -90
		    if (heading > 315 || heading < 1) {
		    	driveTrain.tankDrive( -.8, .8);
		    } else if (heading < 315 && heading > 274) {
		    	driveTrain.tankDrive( -.58, .58);
		    } else if (heading < 274) {
		    	driveTrain.tankDrive(0, 0);
		    	navx.reset();
		    	rightEnc.reset();
		    	step++;
		    } 
			break;
		case 17: // Forward ~ 75 in
			if (navxY <= angleOff && navxY >= -angleOff && encRD <= midrDis3) {
				driveTrain.tankDrive(.8, .8);
			} else if (navxY >= angleOff && encRD <= midrDis3) {
				driveTrain.tankDrive(.8, .85);
			} else if (navxY <= -angleOff && encRD <= midrDis3) {
				driveTrain.tankDrive(.85, .8);
			} else if (encRD >= midrDis3) {
				navx.reset();
				step++;
			}
			break;
		case 18: // Rotate -90
		    if (heading > 315 || heading < 1) {
		    	driveTrain.tankDrive( -.8, .8);
		    } else if (heading < 315 && heading > 274) {
		    	driveTrain.tankDrive( -.58, .58);
		    } else if (heading < 274) {
		    	driveTrain.tankDrive(0, 0);
		    	navx.reset();
		    	rightEnc.reset();
		    	step++;
		    } 
			break;
		case 19: // Forward ~ 10 in
			if (navxY <= angleOff && navxY >= -angleOff && encRD <= midrDis4) {
				driveTrain.tankDrive(.8, .8);
			} else if (navxY >= angleOff && encRD <= midrDis4) {
				driveTrain.tankDrive(.8, .85);
			} else if (navxY <= -angleOff && encRD <= midrDis4) {
				driveTrain.tankDrive(.85, .8);
			} else if (encRD >= midrDis4) {
				navx.reset();
				step++;
			}
			break;
		case 20: // Place Cube
			driveTrain.tankDrive(0, 0);
			rightEnc.reset();
			s1.set(false);
			step++;
			break;
		case 21: // Reverse ~ 10 in
			if (navxY <= angleOff && navxY >= -angleOff && encRD >= midrDis5) {
				driveTrain.tankDrive(-.8, -.8);
			} else if (navxY >= angleOff && encRD >= midrDis5) {
				driveTrain.tankDrive(-.8, -.85);
			} else if (navxY <= -angleOff && encRD >= midrDis5) {
				driveTrain.tankDrive(-.85, -.8);
			} else if (encRD <= midrDis5) {
				navx.reset();
				step++;
			}
			break;
		case 22: // Rotate 90
			if (heading < 45 || heading > 359) {
	    		driveTrain.tankDrive(.8, -.8);
	    	} else if (heading > 45 && heading < 86) {
	    		driveTrain.tankDrive( .58, -.58);
	    	} else if (heading > 86) {
	    		driveTrain.tankDrive(0, 0);
	    		navx.reset();
	    		rightEnc.reset();
	    		step++;
	    	} 
			break;
		case 23: // Forward ~ 100 in
			if (navxY <= angleOff && navxY >= -angleOff && encRD <= midrDis6) {
				driveTrain.tankDrive(.8, .8);
			} else if (navxY >= angleOff && encRD <= midrDis6) {
				driveTrain.tankDrive(.8, .85);
			} else if (navxY <= -angleOff && encRD <= midrDis6) {
				driveTrain.tankDrive(.85, .8);
			} else if (encRD >= midrDis6) {
				navx.reset();
				step++;
			}
			break;
		case 24: // Stop
			driveTrain.tankDrive(0, 0);
			break;
		}
	} else if (ch3.get() == false) { // Right Switch Autonomous Selection
		switch (step) {
		case 1: // Decision Method
			if (gameData.charAt(0) == 'R') {	// Run Scoring Method
				//s1.set(true);
				//s2.set(true);
				step++;
			} else if (gameData.charAt(0) == 'L'){ // Run Driving Method 
				//s1.set(true);
				//s2.set(true);
				step = 11;
			}
			rightEnc.reset();
			navx.reset();
			break;
		case 2:	// Forward ~ 165 in
			if (navxY <= angleOff && navxY >= -angleOff && encRD <= rightDis1) {
				driveTrain.tankDrive(.8, .8);
			} else if (navxY >= angleOff && encRD <= rightDis1) {
				driveTrain.tankDrive(.8, .85);
			} else if (navxY <= -angleOff && encRD <= rightDis1) {
				driveTrain.tankDrive(.85, .8);
			} else if (encRD >= rightDis1) {
				navx.reset();
				step++;
			}
			break;
		case 3:	// Rotate -90
		    if (heading > 315 || heading < 1) {
		    	driveTrain.tankDrive( -.8, .8);
		    } else if (heading < 315 && heading > 274) {
		    	driveTrain.tankDrive( -.58, .58);
		    } else if (heading < 274) {
		    	driveTrain.tankDrive(0, 0);
		    	navx.reset();
		    	rightEnc.reset();
		    	step++;
		    } 
			break;
		case 4:	// Forward ~ 10 in
			if (navxY <= angleOff && navxY >= -angleOff && encRD <= rightDis2) {
				driveTrain.tankDrive(.8, .8);
			} else if (navxY >= angleOff && encRD <= rightDis2) {
				driveTrain.tankDrive(.8, .85);
			} else if (navxY <= -angleOff && encRD <= rightDis2) {
				driveTrain.tankDrive(.85, .8);
			} else if (encRD >= rightDis2) {
				navx.reset();
				step++;
			}
			break;
		case 5:	// Place Cube
			driveTrain.tankDrive(0, 0);
			rightEnc.reset();
			s1.set(false);
			step++;
			break;
		case 6:	// Reverse ~ 10 in
			if (navxY <= angleOff && navxY >= -angleOff && encRD >= rightDis3) {
				driveTrain.tankDrive(-.8, -.8);
			} else if (navxY >= angleOff && encRD >= rightDis3) {
				driveTrain.tankDrive(-.8, -.85);
			} else if (navxY <= -angleOff && encRD >= rightDis3) {
				driveTrain.tankDrive(-.85, -.8);
			} else if (encRD <= rightDis3) {
				navx.reset();
				step++;
			}
			break;
		case 7:	// Rotate 90
			if (heading < 45 || heading > 359) {
	    		driveTrain.tankDrive(.8, -.8);
	    	} else if (heading > 45 && heading < 86) {
	    		driveTrain.tankDrive( .58, -.58);
	    	} else if (heading > 86) {
	    		driveTrain.tankDrive(0, 0);
	    		navx.reset();
	    		rightEnc.reset();
	    		step++;
	    	} 
			break;
		case 8:	// Forward ~ 100 in
			if (navxY <= angleOff && navxY >= -angleOff && encRD <= rightDis4) {
				driveTrain.tankDrive(.8, .8);
			} else if (navxY >= angleOff && encRD <= rightDis4) {
				driveTrain.tankDrive(.8, .85);
			} else if (navxY <= -angleOff && encRD <= rightDis4) {
				driveTrain.tankDrive(.85, .8);
			} else if (encRD >= rightDis4) {
				navx.reset();
				step++;
			}
			break;
		case 9:	// Rotate -90
		    if (heading > 315 || heading < 1) {
		    	driveTrain.tankDrive( -.8, .8);
		    } else if (heading < 315 && heading > 274) {
		    	driveTrain.tankDrive( -.58, .58);
		    } else if (heading < 274) {
		    	driveTrain.tankDrive(0, 0);
		    	navx.reset();
		    	rightEnc.reset();
		    	step++;
		    } 
			break;
		case 10: // Forward ~ 100 in
			if (navxY <= angleOff && navxY >= -angleOff && encRD <= rightDis5) {
				driveTrain.tankDrive(.8, .8);
			} else if (navxY >= angleOff && encRD <= rightDis5) {
				driveTrain.tankDrive(.8, .85);
			} else if (navxY <= -angleOff && encRD <= rightDis5) {
				driveTrain.tankDrive(.85, .8);
			} else if (encRD >= rightDis5) {
				navx.reset();
				step++;
			}
			break;
		case 11: // Forward ~ 250 in
			if (navxY <= angleOff && navxY >= -angleOff && encRD <= rightDis6) {
				driveTrain.tankDrive(.8, .8);
			} else if (navxY >= angleOff && encRD <= rightDis6) {
				driveTrain.tankDrive(.8, .85);
			} else if (navxY <= -angleOff && encRD <= rightDis6) {
				driveTrain.tankDrive(.85, .8);
			} else if (encRD >= rightDis6) {
				navx.reset();
				step++;
			}
			break;
		case 12: // Rotate -90
		    if (heading > 315 || heading < 1) {
		    	driveTrain.tankDrive( -.8, .8);
		    } else if (heading < 315 && heading > 274) {
		    	driveTrain.tankDrive( -.58, .58);
		    } else if (heading < 274) {
		    	driveTrain.tankDrive(0, 0);
		    	navx.reset();
		    	rightEnc.reset();
		    	step++;
		    } 
			break;
		case 13: // Forward ~ 100 in
			if (navxY <= angleOff && navxY >= -angleOff && encRD <= rightDis7) {
				driveTrain.tankDrive(.8, .8);
			} else if (navxY >= angleOff && encRD <= rightDis7) {
				driveTrain.tankDrive(.8, .85);
			} else if (navxY <= -angleOff && encRD <= rightDis7) {
				driveTrain.tankDrive(.85, .8);
			} else if (encRD >= rightDis7) {
				navx.reset();
				step++;
			}
			break;
		case 14: // Stop
			driveTrain.tankDrive(0, 0);
		}
	} else { // Neutral Autonomous  if (ch4.get() == false)
		driveTrain.tankDrive(0, 0);
		}
	}
	
	@Override
    public void teleopInit() {
		// Booleans
			inTake = false;
			outTake = false;
			killLift = false;
			killIntake = false;
			killClimb = false;
			floorMov = false;
			switchMov = false;
			scaleLMov = false;
			scaleHMov = false;
			gripCube = false;
			// Testing
			good90 = false;
			bad90 = false;
			
		// Resets
			leftEnc.reset();
			rightEnc.reset();
			navx.reset();
    }
    
	@Override
    public void teleopPeriodic() {
		
		// Motor Controllers
			// Differential Drive Controls
			double lValue = leftStick.getY() * -1; // Left Drive Speed
			double rValue = rightStick.getY() * -1; // Right Drive Speed
			driveTrain.tankDrive(lValue, rValue); // Tank Drive Control
			
			// Encoder Controls
			double encLD = leftEnc.getDistance() * -1; // Left Encoder Value
			double encRD = rightEnc.getDistance() * 1; // Right Encoder Value
			// System.out.println(encRD);
	    	
			// Intake Controls
	    	double lIntake = maniStick.getY() * 1; // Left Intake Speed		Y - Axis
	    	double rIntake = maniStick.getY() * -1; // Right Intake Speed 	Y - Axis
	    	double loIntake = maniStick.getZ() * 1; // Left Intake Speed	Z - Axis
	    	double roIntake = maniStick.getZ() * -1; // Right Intake Speed	Z - Axis
	    	
	    	// NavX Controls
	    	double navxY = navx.getYaw();
	    	double heading = navx.getFusedHeading(); 
	       	System.out.println(navx.getFusedHeading());	
	    	
	    	// Intake 2.0
	    	if (maniStick.getY() >= .5 && killIntake == false) {
	    		m5.set(lIntake *-1); // Starts Left Outtake
	    		m6.set(rIntake * -1); // Starts Right Outtake
	    	} else if (maniStick.getY() <= -.5) {
	    		m5.set(lIntake * -1); // Starts Left Intake
	    		m6.set(rIntake * -1); // Starts Right Intake
	    		killIntake = false;
	    		gripCube = false;
	    	} else if (maniStick.getZ() <= -.5 && killIntake == false) {
	    		m5.set(loIntake * 1); // Starts Left Intake
	    		m6.set(roIntake * -1); // Starts Right Intake
	    		gripCube = false;
	    	} else if (maniStick.getZ() >= .5 && killIntake == false) {
	    		m5.set(loIntake * 1); // Starts Left Intake
	    		m6.set(roIntake * -1); // Starts Right Intake
	    		gripCube = false;
	    	} else { 
	    		m5.set(0); // Stops Left Intake
	    		m6.set(0); // Stops Right Intake
	    	}
	    	
	    	// Climber
	    	if (maniStick.getRawButton(11) && killClimb == false) {
	    		m7.set(1);
	    	} else if (maniStick.getRawButton(12)) {
	    		m7.set(-1);
	    	}
	    	
	    	// Lifter 2.0
	    	if (maniStick.getPOV() == 0) {
	    		m8.set(1);
	    		s1.set(true); // Moves Lifter Up
	    	} else if (maniStick.getPOV() == 180) {
	    		m8.set(-1);
	    		s1.set(false); // Moves Lifter Down
	    	} else {
	    		m8.set(0);
	    	}
    	
    	// Pneumatics
	    	// Gripper
	    	if (maniStick.getRawButton(3)) {
	    		s2.set(false); // Opens Gripper
	    	} else if (maniStick.getRawButton(4)) {
	    		s2.set(true); // Closes Gripper
	    	}
	    	
	    	// Gear Shifter OR Drive Shifter
	    	if (leftStick.getRawButton(1)) {
	    		s3.set(true); // Change Speed To 100%
	    	} else if (rightStick.getRawButton(1)) {
	    		s3.set(false); // Change Speed To 50%
	    	}
	    	
	    	// Camera POV
	    	if (leftStick.getRawButton(7)) {
	    		s4.set(true); // Move Camera POV Down
	    	} else if (rightStick.getRawButton(7)) {
	    		s4.set(false); // Move Camera POV Up
	    	}
	    	
	    // Encoder Presets
	    	// Floor Position
	    	if (maniStick.getRawButton(7)) {
	    		floorMov = true;
				switchMov = false;
				scaleLMov = false;
				scaleHMov = false;
	    	}
	    		
			if (floorMov == true && killLift == false) {	
				if (liftEnc.getDistance() < floorPos){
					m8.set(1);
				} else if (liftEnc.getDistance() > floorPos){
					m8.set(-1);
				} else if (liftEnc.getDistance() == floorPos){
					m8.set(0);
					floorMov = false;
				}
			}
			
	    	// Switch Position
	    	if (maniStick.getRawButton(8)) {
	    		floorMov = false;
				switchMov = true;
				scaleLMov = false;
				scaleHMov = false;
	    	}
	    	
	    	if (switchMov == true && killLift == false) {	
				if (liftEnc.getDistance() < switchPos){
					m8.set(1);
				} else if (liftEnc.getDistance() > switchPos){
					m8.set(-1);
				} else if (liftEnc.getDistance() == switchPos){
					m8.set(0);
					switchMov = false;
				}
			}
	    	
	    	// Low Scale Position
	    	if (maniStick.getRawButton(9)) {
	    		floorMov = false;
				switchMov = false;
				scaleLMov = true;
				scaleHMov = false;
	    	}
	    	
	    	if (scaleLMov == true && killLift == false) {	
				if (liftEnc.getDistance() < scaleLPos){
					m8.set(1);
				} else if (liftEnc.getDistance() > scaleLPos){
					m8.set(-1);
				} else if (liftEnc.getDistance() == scaleLPos){
					m8.set(0);
					scaleLMov = false;
				}
			}
	    	
	    	// High Scale Position
	    	if (maniStick.getRawButton(10)) {
	    		floorMov = false;
				switchMov = false;
				scaleLMov = false;
				scaleHMov = true;
	    	}
	    	
	    	if (scaleHMov == true && killLift == false) {	
				if (liftEnc.getDistance() < scaleHPos){
					m8.set(1);
				} else if (liftEnc.getDistance() > scaleHPos){
					m8.set(-1);
				} else if (liftEnc.getDistance() == scaleHPos){
					m8.set(0);
					scaleHMov = false;
				}
			}
	    	
		    // NavX Turning	
	    	// Right (90)
	    	if (leftStick.getRawButton(2)) {
	    		good90 = true;
	    		bad90 = false;
	    		navx.reset();
	    	}
	    	
	    	if (good90 == true) {
		    	if (heading < 45 || heading > 359) {
		    		driveTrain.tankDrive(.8, -.8);
		    	} else if (heading > 45 && heading < 86) {
		    		driveTrain.tankDrive( .58, -.58);
		    	} else if (heading > 86) {
		    		driveTrain.tankDrive(0, 0);
		    		good90 = false;
		    	}	
	    	}  
	    				
	    	// Left (-90)
	    	if (rightStick.getRawButton(2)) {
	    		good90 = false;
	    		bad90 = true;
	    		navx.reset();
	    	}
	    	
	    	if (bad90 == true) {
		    	if (heading > 315 || heading < 1) {
		    		driveTrain.tankDrive( -.8, .8);
		    	} else if (heading < 315 && heading > 274) {
		    		driveTrain.tankDrive( -.58, .58);
		    	} else if (heading < 274) {
		    		driveTrain.tankDrive(0, 0);
		    		bad90 = false;
		    	}	
	    	}    
	    	
	    // Limit Switches				
			// Cube Pickup 2.0
			if (autoCube.get() == false) {
			    gripCube = true; // Grips Cube
			    killIntake = true;
			}
			
			if (gripCube == true) {
				s2.set(true);
			}
			if (gripCube == false) {
				s2.set(false);
			}		
			
			// Climbed
			if (topRung.get() == false) {
				killClimb = true;
			}
				
		// Kill Commands
			// Kill Lift
			if (maniStick.getRawButton(5)) {
				killLift = true;
				floorMov = false;
				switchMov = false;
				scaleLMov = false;
				scaleHMov = false;
			}
			if (killLift == true) {
				m8.set(0);
				killLift = false;
			}
			
			// Kill Intake
			if (maniStick.getRawButton(6)) {
				killIntake = true;
			}
			if (killIntake == true) {
				m5.set(0);
				m6.set(0);
			}
			
			// Kill Climber
			if (killClimb = true) {
				m7.set(0);
				killClimb = false;
			}
    }
	
	@Override
    public void testInit() {
		user = false;
	}
	
	@Override
    public void testPeriodic() {
		if (ch1.get() == false) {
			System.out.println('4');
		} else if (ch2.get() == false) {
			System.out.println('5');
		} else if (ch3.get() == false) {
			System.out.println('6');
		} else {
			System.out.println('0');
		}
				
		// System.out.println(RobotController.getUserButton());
		
		if (RobotController.getUserButton() == true) {
			user = true;
		}
		if (user == true) {
			s1.set(true);
			user = false;
		}
	}
	
	@Override
    public void disabledInit() {
	}
	
	@Override
    public void disabledPeriodic() {
		//System.out.println(RobotController.getUserButton());
	}
}
