package org.usfirst.frc.team3489.robot;

/*
Alex 01/13/2018 - Palm Base Code

Left Stick Buttons
 * 1 - Camera POV Up
 * 7 - Shift Gears 50%

Right Stick Buttons
 * 1 - Camera POV Down
 * 7 - Shift Gears 100%

Manipulator Stick Buttons
 * 1 - Open Gripper / Intake
 * 2 - Close Gripper / Outtake
 * 3 - Lift Retractor
 * 4 - Lower Retractor
 * 5 - Kill Lift
 * 6 - NA
 * 7 - Floor Position
 * 8 - Switch Position 
 * 9 - Low Scale Position 
 * 10 - High Scale Position
 * 11 - Climber Up
 * 12 - Climber Down
*/

import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import com.ctre.phoenix.motorcontrol.can.*;

public class Robot extends IterativeRobot {
	
	Joystick leftStick = new Joystick(0);	// Left Driver Joystick
	Joystick rightStick = new Joystick(1);	// Right Driver Joystick
	Joystick maniStick = new Joystick(2);	// Manipulator Joystick
	WPI_TalonSRX m0 = new WPI_TalonSRX(0);	// Front Left Motor
	WPI_TalonSRX m1 = new WPI_TalonSRX(1);	// Front Right Motor
	WPI_TalonSRX m2 = new WPI_TalonSRX(2);	// Back Left Motor (Slave)
	WPI_TalonSRX m3 = new WPI_TalonSRX(3);	// Back Right Motor (Slave)
	WPI_TalonSRX m4 = new WPI_TalonSRX(4);	// ?
	WPI_TalonSRX m5 = new WPI_TalonSRX(5);	// Climb Motor
	WPI_TalonSRX m6 = new WPI_TalonSRX(6);	// Lift Motor
	DifferentialDrive driveTrain = new DifferentialDrive(m0, m1);	// Main Drive Train
	Solenoid s1 = new Solenoid(20, 1);	// Lift 
	Solenoid s2 = new Solenoid(20, 2);	// Grip
	Solenoid s3 = new Solenoid(20, 3);	// Gear Shift
	Solenoid s4 = new Solenoid(20, 4);	// CameraPOV
	Encoder leftEnc = new Encoder(4, 5, false, Encoder.EncodingType.k2X);	// Left Drive Encoder
	Encoder rightEnc = new Encoder(6, 7, false, Encoder.EncodingType.k2X);	// Right Drive Encoder
	Encoder liftEnc = new Encoder(8, 9, false, Encoder.EncodingType.k2X);	// Lift Encoder
	AnalogGyro gyro = new AnalogGyro(0);	// Gyroscope
	DigitalInput gripperDown = new DigitalInput(0);	// Hall Sensor
	DigitalInput autoCube = new DigitalInput(1); // Auto Grip and Retract With Cube
	DigitalInput topRung = new DigitalInput(2); // Fully Climbed Rung
	DriverStation.Alliance color;	// = DriverStation.getInstance().getAlliance();
	int step = 1;	// Initial Step Value
	
	boolean intakeOn;
	boolean intakeOff;
	
	// Autonomous
		// Selection
			DigitalInput ch1 = new DigitalInput(10);	// Left Switch Score/Autoline
			DigitalInput ch2 = new DigitalInput(11);	// Middle Switch Score/Autoline
			DigitalInput ch3 = new DigitalInput(12);	// Right Switch Score/Autoline
			DigitalInput ch4 = new DigitalInput(13);	// Null
		
		// Booleans
			boolean firstTime = true; // First Part Of Autonomous
			boolean secondTime = true; // Second Part Of Autonomous

		// Distances
			 // Left Side Switch Scoring
				double leftDis1;
				double leftDis2;
				double leftDis3;
				double leftDis4;
				double leftDis5;
				double leftDis6;
			 // Middle Left Switch Scoring
				double midlDis1;
				double midlDis2;
				double midlDis3;
				double midlDis4;
				double midlDis5;
				double midlDis6;
			 // Middle Right Switch Scoring
				double midrDis1;
				double midrDis2;
				double midrDis3;
				double midrDis4;
				double midrDis5;
				double midrDis6;
			 // Right Side Switch Scoring
				double rightDis1;
				double rightDis2;
				double rightDis3;
				double rightDis4;
				double rightDis5;
				double rightDis6;
		
		// Angles
			 // Left Side Switch Scoring
				double leftAng1;
				double leftAng2;
			 // Middle Left Switch Scoring
				double midlAng1;
				double midlAng2;
				double midlAng3;
				double midlAng4;
			 // Middle Right Switch Scoring
				double midrAng1;
				double midrAng2;
				double midrAng3;
				double midrAng4;
		     // Right Side Switch Scoring
				double rightAng1;
				double rightAng2;
			 // Angle Offset
				double angleOff;

	@Override
    public void robotInit() {
		
		// Safety
			driveTrain.setSafetyEnabled(false);
		
		// Camera
			try {
				CameraServer.getInstance().startAutomaticCapture();
				//system.out.println("Cam0");
			} catch (Exception e) {
				//system.out.println("Failed Vision");
			}
				
		// Gyroscope
			gyro.calibrate();
			gyro.initGyro();
			gyro.reset();
		
		// Slaves
			m2.follow(m0);	// Back Left Motor (Slave) Follows Front Left Motor
			m3.follow(m1);	// Back Right Motor (Slave) Follows Front Right Motor
    	
		// SmartDashboard
    	
    }
    
	@Override
    public void autonomousInit() {
		
		color = DriverStation.getInstance().getAlliance();
		
		// Booleans
			firstTime = true; // First Part Of Autonomous
			secondTime = true; // Second Part Of Autonomous
		
		// Autonomous Distances (Encoder)	
			 // Left Side Switch Scoring
			 	leftDis1 = 0;	//
			 	leftDis2 = 0;	//
			 	leftDis3 = 0;	//
			 	leftDis4 = 0;	//
			 	leftDis5 = 0;	//	
			 	leftDis6 = 0;	//
			 // Middle Left Switch Scoring
			 	midlDis1 = 0;	//
			 	midlDis2 = 0;	//
			 	midlDis3 = 0;	//
			 	midlDis4 = 0;	//
			 	midlDis5 = 0;	//
			 	midlDis6 = 0;	//
			 // Middle Right Switch Scoring
			 	midrDis1 = 0;	//
			 	midrDis2 = 0;	//
				midrDis3 = 0;	//
				midrDis4 = 0;	//
				midrDis5 = 0;	//
				midrDis6 = 0;	//
			 // Right Side Switch Scoring
				rightDis1 = 0;	//
				rightDis2 = 0;	//
				rightDis3 = 0;	//
				rightDis4 = 0;	//
				rightDis5 = 0;	//
				rightDis6 = 0;	//
			 
		// Autonomous Turn Angles (Gyro)	
			 // Left Side Switch Scoring
				leftAng1 = 0;	//
				leftAng2 = 0;	//
			 // Middle Left Switch Scoring
				midlAng1 = 0;	//
				midlAng2 = 0;	//
				midlAng3 = 0;	//
				midlAng4 = 0;	//
			 // Middle Right Switch	Scoring
				midrAng1 = 0;	//
				midrAng2 = 0;	//
				midrAng3 = 0;	//
				midrAng4 = 0;	//
			 // Right Side Switch Scoring
				rightAng1 = 0;	//
				rightAng2 = 0;	//
			 //Angle Offset
				angleOff = .5; // Adjustment Angle For Driving With Gyroscope

		// Resets
			leftEnc.reset();
			rightEnc.reset();
			gyro.reset();
			step = 1;
    }
    
	@Override
    public void autonomousPeriodic() {
		
			double encLD = leftEnc.getDistance() * -1; // encLD is the value of the left encoder
			double encRD = rightEnc.getDistance() * 1; // encRD is the value on the right encoder
			double gyroD = gyro.getAngle(); // gyroD is the angle of the gyro
		
    	  String gameData;
    	    gameData = DriverStation.getInstance().getGameSpecificMessage();
    	    if(gameData.charAt(0) == 'L')
    	    {
    	    	
    	    } else {
  
    	    }
    
	if (ch1.get() == false) { 
		switch (step) {
		case 1:
			if(gameData.charAt(0) == 'L' && firstTime == true) {
				step++;
			} else if(gameData.charAt(0) == 'R' && firstTime == true){
				step = 10; // ??
			}
			rightEnc.reset();
			gyro.reset();
			break;
		case 2:
			driveTrain.tankDrive(.75, .75);
			if(gyroD >= angleOff && rightEnc.getDistance() <= boilDisR1){
				//system.out.println("adjust right");
				driveTrain.tankDrive(.85, .8);
			}
			if(gyroD <= -angleOff && rightEnc.getDistance() <= boilDisR1){
				//system.out.println("adjust left");
				driveTrain.tankDrive(.8, .85);
			}
			if(gyroD <= angleOff && gyroD >= -angleOff && rightEnc.getDistance() <= boilDisR1){
				driveTrain.tankDrive(.8, .8);
			}
			if (encRD > boilDisR1) { //03237 2:25 Jake Alex changes auto dis to 480 from 520
				gyro.reset();
				step++;
			}
			break;
		case 3:
			driveTrain.tankDrive(-.65, .65);
			if (gyroD >= boilAngR1) {
				rightEnc.reset();
				step++;
			}
			break;
		case 4:
			driveTrain.tankDrive(.8, .8);
			if(gyroD >= angleOff && rightEnc.getDistance() <= boilDisR2){
				//system.out.println("adjust right");
				driveTrain.tankDrive(.85, .8);
			}
			if(gyroD <= -angleOff && rightEnc.getDistance() <= boilDisR2){
				//system.out.println("adjust left");
				driveTrain.tankDrive(.8, .85);
			}
			if(gyroD <= angleOff && gyroD >= -angleOff && rightEnc.getDistance() <= boilDisR2){
				driveTrain.tankDrive(.8, .8);
			}
			if (encRD > boilDisR2) {
				//gyro.reset();
				step++;
			}
			break;
		case 5:
			driveTrain.tankDrive(0, 0);
			firstTime = false;
			rightEnc.reset();
			gripperClaw.set(true);
			step++;
			break;
		case 6:
			driveTrain.tankDrive(-.65, -.65);
			//Jake John 041017
			//Added gyro to increase accuracy of boiler
			if(gyroD >= angleOff && rightEnc.getDistance() >= boilDisR3){
				//system.out.println("adjust right");
				driveTrain.tankDrive(-.8, -.85);
			}
			if(gyroD <= -angleOff && rightEnc.getDistance() >= boilDisR3){
				//system.out.println("adjust left");
				driveTrain.tankDrive(-.85, -.8);
			}
			if(gyroD <= angleOff && gyroD >= -angleOff && rightEnc.getDistance() >= boilDisR3){
				driveTrain.tankDrive(-.8, -.8);
			}
			if (encRD < boilDisR3) {
				gripperClaw.set(false);
				gyro.reset();
				step++;
			}
			break;
		case 7:
			driveTrain.tankDrive(.75, -.75);
			if (gyroD <= boilAngR2) {
				m7.set(-1);
				gyro.reset();
				rightEnc.reset();
				step++;
			}
			break;
		case 8:
			driveTrain.tankDrive(.75, .75);
			if(gyroD >= angleOff && rightEnc.getDistance() <= boilDisR4){
				//system.out.println("adjust right");
				driveTrain.tankDrive(.85, .8);
			}
			if(gyroD <= -angleOff && rightEnc.getDistance() <= boilDisR4){
				//system.out.println("adjust left");
				driveTrain.tankDrive(.8, .85);
			}
			if(gyroD <= angleOff && gyroD >= -angleOff && rightEnc.getDistance() <= boilDisR4){
				driveTrain.tankDrive(.8, .8);
			}
			if (encRD > boilDisR4) {
				step++;
			}
			break;
		case 9:
			driveTrain.tankDrive(0, 0);
			if (PDP.getCurrent(15) <= 3) {
				m6.set(-.55);
			}
			if (PDP.getCurrent(15) >= 3 && hJam == false) {
				if (hInit > hInitMax) {
					hRun = false;
					hJam = true;
					isTime = Timer.getFPGATimestamp();
				} else {
					hInit = hInit + 1;
				}
			}
			if (hJam == true) {
				m6.set(.7);
				if (hJam == true && chTime > ihTime + .05) {
					hJam = false;
					hRun = true;
					hInit = 0;
				}
			}
			if (hopper.getDistance() >= 3000) {
				m7.set(0);
				m6.set(0);
			}
			break;
		case 10: // Blue Alliance
			//system.out.println("6 Stand Blue");
			driveTrain.tankDrive(.75, .75);
			if(gyroD >= angleOff && rightEnc.getDistance() <= boilDisB1){
				//system.out.println("adjust right");
				driveTrain.tankDrive(.85, .8);
			}
			if(gyroD <= -angleOff && rightEnc.getDistance() <= boilDisB1){
				//system.out.println("adjust left");
				driveTrain.tankDrive(.8, .85);
			}
			if(gyroD <= angleOff && gyroD >= -angleOff && rightEnc.getDistance() <= boilDisB1){
				driveTrain.tankDrive(.8, .8);
			}
			if (encRD > boilDisB1) { //032317 2:22 Jake Alex changed distance to 480 from 520
				driveTrain.tankDrive(0, 0);
				gyro.reset();
				step++;
			}
			break;
		case 11:
			driveTrain.tankDrive(.65, -.65);
			if (gyroD <= boilAngB1) {
				driveTrain.tankDrive(0, 0);
				gyro.reset();
				rightEnc.reset();
				step++;
			}
			break;
		case 12:
			driveTrain.tankDrive(.65, .65);
			if(gyroD >= angleOff && rightEnc.getDistance() <= boilDisB2){
				//system.out.println("adjust right");
				driveTrain.tankDrive(.85, .8);
			}
			if(gyroD <= -angleOff && rightEnc.getDistance() <= boilDisB2){
				//system.out.println("adjust left");
				driveTrain.tankDrive(.8, .85);
			}
			if(gyroD <= angleOff && gyroD >= -angleOff && rightEnc.getDistance() <= boilDisB2){
				driveTrain.tankDrive(.8, .8);
			}
			if (encRD > boilDisB2) {
				driveTrain.tankDrive(0, 0);
				//gyro.reset();
				step++;
			}
			break;
		case 13:
			driveTrain.tankDrive(0, 0);
			secondTime = false;
			rightEnc.reset();
			gripperClaw.set(true);
			step++;
			break;
		case 14:
			driveTrain.tankDrive(-.65, -.65);
			//Jake John 041017
			//Added gyro to increase accuracy of boiler
			if(gyroD >= angleOff && rightEnc.getDistance() >= boilDisB3){
				//system.out.println("adjust right");
				driveTrain.tankDrive(-.8, -.85);
			}
			if(gyroD <= -angleOff && rightEnc.getDistance() >= boilDisB3){
				//system.out.println("adjust left");
				driveTrain.tankDrive(-.85, -.8);
			}
			if(gyroD <= angleOff && gyroD >= -angleOff && rightEnc.getDistance() >= boilDisB3){
				driveTrain.tankDrive(-.8, -.8);
			}
			if (encRD < boilDisB3) {
				gripperClaw.set(false);
				gyro.reset();
				step++;
			}
			break;
		case 15:
			driveTrain.tankDrive(.75, -.75);
			m7.set(-1);
			if (gyroD <= boilAngB2) {
				driveTrain.tankDrive(0, 0);
				rightEnc.reset();
				gyro.reset();
				step++;
			}
			break;
		case 16:
			if(gyroD >= angleOff && rightEnc.getDistance() <= boilDisB4){
				//system.out.println("adjust right");
				driveTrain.tankDrive(.85, .8);
			}
			if(gyroD <= -angleOff && rightEnc.getDistance() <= boilDisB4){
				//system.out.println("adjust left");
				driveTrain.tankDrive(.8, .85);
			}
			if(gyroD <= angleOff && gyroD >= -angleOff && rightEnc.getDistance() <= boilDisB4){
				driveTrain.tankDrive(.8, .8);
			}
			driveTrain.tankDrive(.75, .75);
			if (encRD > boilDisB4) {
				step++;
			}
			break;
		case 17:
			driveTrain.tankDrive(0, 0);
			if (PDP.getCurrent(15) <= 3) {
				m6.set(-.5);
			}
			if (PDP.getCurrent(15) >= 3 && hJam == false) {
				if (hInit > hInitMax) {
					hRun = false;
					hJam = true;
					isTime = Timer.getFPGATimestamp();
				} else {
					hInit = hInit + 1;
				}
			}
			if (hJam == true) {
				m6.set(.7);
				if (hJam == true && chTime > ihTime + .05) {
					hJam = false;
					hRun = true;
					hInit = 0;
				}
			}
			if (hopper.getDistance() >= 3000) {
				m7.set(0);
				m6.set(0);
			}
			break;
		}
	} else if (chickenHead6.get() == false) { //chickenHead 11 on 3 prong, 6 on normal
	}
}
	
	@Override
    public void teleopInit() {

    }
    
	@Override
    public void teleopPeriodic() {

    	double lValue = leftStick.getY() * -1;	// Left Drive Speed
    	double rValue = rightStick.getY() * -1;	// Right Drive Speed
    	driveTrain.tankDrive(lValue, rValue);	// Tank Drive Control
    	
    	// Gear Shifter
    	if (leftStick.getRawButton(1)) {
    		s3.set(true);
    	}
    	
    	if (rightStick.getRawButton(1)) {
    		s3.set(false);
    	}
    	
    	// Lifter
    	if (leftStick.getRawButton(2)) {
    		s1.set(true);
    	}
    	
    	if (rightStick.getRawButton(2)) {
    		s1.set(false);
    	}
    	
    	// Gripper
    	if (leftStick.getRawButton(3)) {
    		s2.set(true);
    	}
    	
    	if (rightStick.getRawButton(3)) {
    		s2.set(false);
    	}
    	
    	// Intake
    	if (leftStick.getRawButton(5) && intakeOff == true) {
    		intakeOn = true;
    		intakeOff = false;
    	}
    	
    	if(intakeOn == true) {
    		m6.set(.4);
    		System.out.println("On");
    	}
    	
    	if (rightStick.getRawButton(5) && intakeOn == true) {
    		intakeOff = true;
    		intakeOn = false;
    	}
    	
    	if (intakeOff == true) {
    		m6.set(0);
    		System.out.println("Off");
    	}
    }
}
